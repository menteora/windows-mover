# -*- coding: utf-8 -*-
"""WindowsMover create_icon.ipynb

Automatically generated by Colab.
"""

# ⬇️ Cell 1: install
!pip -q install pillow

# ⬇️ Cell 2: funzioni (PNG con frecce | ICO con frecce)
from PIL import Image, ImageDraw

def parse_color(s: str):
    if s.lower() == "transparent": return (0,0,0,0)
    if s.startswith("#"): s = s[1:]
    if len(s)==6:  r,g,b = int(s[0:2],16),int(s[2:4],16),int(s[4:6],16); return (r,g,b,255)
    if len(s)==8:  r,g,b,a = int(s[0:2],16),int(s[2:4],16),int(s[4:6],16),int(s[6:8],16); return (r,g,b,a)
    raise ValueError("Color hex #RRGGBB or #RRGGBBAA or 'transparent'")

def draw_square_corners(d, sz, fg, pad, seg, t):
    # TL
    d.rectangle([pad, pad, pad+seg, pad+t], fill=fg)
    d.rectangle([pad, pad, pad+t,   pad+seg], fill=fg)
    # TR
    d.rectangle([sz-pad-seg, pad, sz-pad, pad+t], fill=fg)
    d.rectangle([sz-pad-t,   pad, sz-pad, pad+seg], fill=fg)
    # BL
    d.rectangle([pad, sz-pad-t, pad+seg, sz-pad], fill=fg)
    d.rectangle([pad, sz-pad-seg, pad+t, sz-pad], fill=fg)
    # BR
    d.rectangle([sz-pad-seg, sz-pad-t, sz-pad, sz-pad], fill=fg)
    d.rectangle([sz-pad-t,   sz-pad-seg, sz-pad, sz-pad], fill=fg)

def draw_center_arrows(d, sz, fg, gap_px=1):
    aw = int(sz * 0.16)   # larghezza metà freccia
    ah = int(sz * 0.34)   # altezza freccia
    cy = sz // 2
    # ← sinistra
    cx1 = int(sz * 0.32) - gap_px
    d.polygon([(cx1+aw, cy-ah//2), (cx1+aw, cy+ah//2), (cx1-aw, cy)], fill=fg)
    # → destra
    cx2 = int(sz * 0.68) + gap_px
    d.polygon([(cx2-aw, cy-ah//2), (cx2-aw, cy+ah//2), (cx2+aw, cy)], fill=fg)

def make_png_with_arrows(sz=256, fg=(255,255,255,255), bg=(0,0,0,255),
                         pad_ratio=0.10, seg_ratio=0.28, thickness_ratio=0.08, gap_px=1):
    """PNG: angoli squadrati + frecce (separate di 1px)."""
    img = Image.new("RGBA", (sz, sz), bg)
    d = ImageDraw.Draw(img)
    pad = max(1, int(sz*pad_ratio))
    seg = int(sz*seg_ratio)
    t   = max(1, int(sz*thickness_ratio))
    draw_square_corners(d, sz, fg, pad, seg, t)
    draw_center_arrows(d, sz, fg, gap_px=gap_px)
    return img

def make_ico_layer(sz, fg=(0,0,0,255), bg=(0,0,0,0),
                   pad_ratio=0.10, seg_ratio=0.28, gap_px=1):
    """ICO: cornici 1px (square) + frecce separate 1px."""
    img = Image.new("RGBA", (sz, sz), bg)
    d = ImageDraw.Draw(img)
    pad = max(1, int(sz*pad_ratio))
    seg = int(sz*seg_ratio)
    t   = 1
    draw_square_corners(d, sz, fg, pad, seg, t)
    draw_center_arrows(d, sz, fg, gap_px=gap_px)
    return img

# ⬇️ Cell 3: genera PNG (come immagine, con frecce) + ICO
# PNG: bianco su sfondo nero (come il sample)
PNG_FG = parse_color("#FFFFFF")
PNG_BG = parse_color("#000000")
png_img = make_png_with_arrows(sz=256, fg=PNG_FG, bg=PNG_BG, thickness_ratio=0.08, gap_px=1)
png_path = "window-mover-final-256.png"
png_img.save(png_path, format="PNG")

# ICO: nero su trasparente (come in precedenza)
ICO_FG = parse_color("#000000")
ICO_BG = parse_color("transparent")
sizes = [16, 24, 32, 48, 64, 128, 256]
layers = [make_ico_layer(s, fg=ICO_FG, bg=ICO_BG, gap_px=1) for s in sizes]
ico_path = "window-mover-final.ico"
layers[0].save(ico_path, sizes=[(s, s) for s in sizes], format="ICO")

print("Creati:", png_path, ico_path)

# ⬇️ Cell 4: download automatico
from google.colab import files
files.download("window-mover-256.png")
files.download("window-mover.ico")
